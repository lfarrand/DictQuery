//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DataTableExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IDataTableExpressionListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class DataTableExpressionBaseListener : IDataTableExpressionListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] DataTableExpressionParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] DataTableExpressionParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.orExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpression([NotNull] DataTableExpressionParser.OrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.orExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpression([NotNull] DataTableExpressionParser.OrExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.andExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpression([NotNull] DataTableExpressionParser.AndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.andExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpression([NotNull] DataTableExpressionParser.AndExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.notExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] DataTableExpressionParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.notExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] DataTableExpressionParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.comparisonExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparisonExpression([NotNull] DataTableExpressionParser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.comparisonExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparisonExpression([NotNull] DataTableExpressionParser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InList</c>
	/// labeled alternative in <see cref="DataTableExpressionParser.inExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInList([NotNull] DataTableExpressionParser.InListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InList</c>
	/// labeled alternative in <see cref="DataTableExpressionParser.inExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInList([NotNull] DataTableExpressionParser.InListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.additiveExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpression([NotNull] DataTableExpressionParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.additiveExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpression([NotNull] DataTableExpressionParser.AdditiveExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.multiplicativeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpression([NotNull] DataTableExpressionParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.multiplicativeExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpression([NotNull] DataTableExpressionParser.MultiplicativeExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.unaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryExpression([NotNull] DataTableExpressionParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.unaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryExpression([NotNull] DataTableExpressionParser.UnaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrimaryExpression([NotNull] DataTableExpressionParser.PrimaryExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.primaryExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrimaryExpression([NotNull] DataTableExpressionParser.PrimaryExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] DataTableExpressionParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] DataTableExpressionParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.functionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionName([NotNull] DataTableExpressionParser.FunctionNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.functionName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionName([NotNull] DataTableExpressionParser.FunctionNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] DataTableExpressionParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] DataTableExpressionParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.columnReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumnReference([NotNull] DataTableExpressionParser.ColumnReferenceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.columnReference"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumnReference([NotNull] DataTableExpressionParser.ColumnReferenceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="DataTableExpressionParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] DataTableExpressionParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="DataTableExpressionParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] DataTableExpressionParser.LiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
