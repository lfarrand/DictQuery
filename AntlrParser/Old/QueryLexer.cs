//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class QueryLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, STRING_LITERAL=38, 
		INTEGER=39, DECIMAL=40, SCIENTIFIC=41, DATE_LITERAL=42, BOOLEAN=43, NULL=44, 
		IDENTIFIER=45, BRACKETED_IDENTIFIER=46, GRAVE_IDENTIFIER=47, WHITESPACE=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "STRING_LITERAL", "INTEGER", "DECIMAL", 
		"SCIENTIFIC", "DATE_LITERAL", "BOOLEAN", "NULL", "IDENTIFIER", "BRACKETED_IDENTIFIER", 
		"GRAVE_IDENTIFIER", "WHITESPACE"
	};


	public QueryLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public QueryLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'NOT'", "'AND'", "'OR'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'='", "'<>'", "'>'", "'<'", "'>='", "'<='", "'LIKE'", "'IS'", 
		"'IN'", "'BETWEEN'", "'CONVERT'", "','", "'LEN'", "'ISNULL'", "'IIF'", 
		"'TRIM'", "'SUBSTRING'", "'SUM'", "'AVG'", "'MIN'", "'MAX'", "'COUNT'", 
		"'STDEV'", "'VAR'", "'PARENT'", "'.'", "'CHILD'", null, null, null, null, 
		null, null, "'NULL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING_LITERAL", "INTEGER", "DECIMAL", "SCIENTIFIC", "DATE_LITERAL", 
		"BOOLEAN", "NULL", "IDENTIFIER", "BRACKETED_IDENTIFIER", "GRAVE_IDENTIFIER", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,1,1,1,
		1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
		14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,
		18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
		28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
		31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
		34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,
		37,1,37,5,37,248,8,37,10,37,12,37,251,9,37,1,37,1,37,1,38,3,38,256,8,38,
		1,38,4,38,259,8,38,11,38,12,38,260,1,39,3,39,264,8,39,1,39,4,39,267,8,
		39,11,39,12,39,268,1,39,1,39,4,39,273,8,39,11,39,12,39,274,1,40,3,40,278,
		8,40,1,40,4,40,281,8,40,11,40,12,40,282,1,40,1,40,4,40,287,8,40,11,40,
		12,40,288,3,40,291,8,40,1,40,1,40,3,40,295,8,40,1,40,4,40,298,8,40,11,
		40,12,40,299,1,41,1,41,4,41,304,8,41,11,41,12,41,305,1,41,1,41,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,319,8,42,1,43,1,43,1,43,1,43,
		1,43,1,44,1,44,5,44,328,8,44,10,44,12,44,331,9,44,1,45,1,45,1,45,1,45,
		4,45,337,8,45,11,45,12,45,338,1,45,1,45,1,46,1,46,4,46,345,8,46,11,46,
		12,46,346,1,46,1,46,1,47,4,47,352,8,47,11,47,12,47,353,1,47,1,47,0,0,48,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
		77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,1,0,10,1,0,
		39,39,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,1,0,35,35,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,93,93,1,0,96,96,3,0,9,10,
		13,13,32,32,376,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,97,
		1,0,0,0,3,99,1,0,0,0,5,101,1,0,0,0,7,105,1,0,0,0,9,109,1,0,0,0,11,112,
		1,0,0,0,13,114,1,0,0,0,15,116,1,0,0,0,17,118,1,0,0,0,19,120,1,0,0,0,21,
		122,1,0,0,0,23,124,1,0,0,0,25,127,1,0,0,0,27,129,1,0,0,0,29,131,1,0,0,
		0,31,134,1,0,0,0,33,137,1,0,0,0,35,142,1,0,0,0,37,145,1,0,0,0,39,148,1,
		0,0,0,41,156,1,0,0,0,43,164,1,0,0,0,45,166,1,0,0,0,47,170,1,0,0,0,49,177,
		1,0,0,0,51,181,1,0,0,0,53,186,1,0,0,0,55,196,1,0,0,0,57,200,1,0,0,0,59,
		204,1,0,0,0,61,208,1,0,0,0,63,212,1,0,0,0,65,218,1,0,0,0,67,224,1,0,0,
		0,69,228,1,0,0,0,71,235,1,0,0,0,73,237,1,0,0,0,75,243,1,0,0,0,77,255,1,
		0,0,0,79,263,1,0,0,0,81,277,1,0,0,0,83,301,1,0,0,0,85,318,1,0,0,0,87,320,
		1,0,0,0,89,325,1,0,0,0,91,332,1,0,0,0,93,342,1,0,0,0,95,351,1,0,0,0,97,
		98,5,40,0,0,98,2,1,0,0,0,99,100,5,41,0,0,100,4,1,0,0,0,101,102,5,78,0,
		0,102,103,5,79,0,0,103,104,5,84,0,0,104,6,1,0,0,0,105,106,5,65,0,0,106,
		107,5,78,0,0,107,108,5,68,0,0,108,8,1,0,0,0,109,110,5,79,0,0,110,111,5,
		82,0,0,111,10,1,0,0,0,112,113,5,43,0,0,113,12,1,0,0,0,114,115,5,45,0,0,
		115,14,1,0,0,0,116,117,5,42,0,0,117,16,1,0,0,0,118,119,5,47,0,0,119,18,
		1,0,0,0,120,121,5,37,0,0,121,20,1,0,0,0,122,123,5,61,0,0,123,22,1,0,0,
		0,124,125,5,60,0,0,125,126,5,62,0,0,126,24,1,0,0,0,127,128,5,62,0,0,128,
		26,1,0,0,0,129,130,5,60,0,0,130,28,1,0,0,0,131,132,5,62,0,0,132,133,5,
		61,0,0,133,30,1,0,0,0,134,135,5,60,0,0,135,136,5,61,0,0,136,32,1,0,0,0,
		137,138,5,76,0,0,138,139,5,73,0,0,139,140,5,75,0,0,140,141,5,69,0,0,141,
		34,1,0,0,0,142,143,5,73,0,0,143,144,5,83,0,0,144,36,1,0,0,0,145,146,5,
		73,0,0,146,147,5,78,0,0,147,38,1,0,0,0,148,149,5,66,0,0,149,150,5,69,0,
		0,150,151,5,84,0,0,151,152,5,87,0,0,152,153,5,69,0,0,153,154,5,69,0,0,
		154,155,5,78,0,0,155,40,1,0,0,0,156,157,5,67,0,0,157,158,5,79,0,0,158,
		159,5,78,0,0,159,160,5,86,0,0,160,161,5,69,0,0,161,162,5,82,0,0,162,163,
		5,84,0,0,163,42,1,0,0,0,164,165,5,44,0,0,165,44,1,0,0,0,166,167,5,76,0,
		0,167,168,5,69,0,0,168,169,5,78,0,0,169,46,1,0,0,0,170,171,5,73,0,0,171,
		172,5,83,0,0,172,173,5,78,0,0,173,174,5,85,0,0,174,175,5,76,0,0,175,176,
		5,76,0,0,176,48,1,0,0,0,177,178,5,73,0,0,178,179,5,73,0,0,179,180,5,70,
		0,0,180,50,1,0,0,0,181,182,5,84,0,0,182,183,5,82,0,0,183,184,5,73,0,0,
		184,185,5,77,0,0,185,52,1,0,0,0,186,187,5,83,0,0,187,188,5,85,0,0,188,
		189,5,66,0,0,189,190,5,83,0,0,190,191,5,84,0,0,191,192,5,82,0,0,192,193,
		5,73,0,0,193,194,5,78,0,0,194,195,5,71,0,0,195,54,1,0,0,0,196,197,5,83,
		0,0,197,198,5,85,0,0,198,199,5,77,0,0,199,56,1,0,0,0,200,201,5,65,0,0,
		201,202,5,86,0,0,202,203,5,71,0,0,203,58,1,0,0,0,204,205,5,77,0,0,205,
		206,5,73,0,0,206,207,5,78,0,0,207,60,1,0,0,0,208,209,5,77,0,0,209,210,
		5,65,0,0,210,211,5,88,0,0,211,62,1,0,0,0,212,213,5,67,0,0,213,214,5,79,
		0,0,214,215,5,85,0,0,215,216,5,78,0,0,216,217,5,84,0,0,217,64,1,0,0,0,
		218,219,5,83,0,0,219,220,5,84,0,0,220,221,5,68,0,0,221,222,5,69,0,0,222,
		223,5,86,0,0,223,66,1,0,0,0,224,225,5,86,0,0,225,226,5,65,0,0,226,227,
		5,82,0,0,227,68,1,0,0,0,228,229,5,80,0,0,229,230,5,65,0,0,230,231,5,82,
		0,0,231,232,5,69,0,0,232,233,5,78,0,0,233,234,5,84,0,0,234,70,1,0,0,0,
		235,236,5,46,0,0,236,72,1,0,0,0,237,238,5,67,0,0,238,239,5,72,0,0,239,
		240,5,73,0,0,240,241,5,76,0,0,241,242,5,68,0,0,242,74,1,0,0,0,243,249,
		5,39,0,0,244,248,8,0,0,0,245,246,5,39,0,0,246,248,5,39,0,0,247,244,1,0,
		0,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,
		252,1,0,0,0,251,249,1,0,0,0,252,253,5,39,0,0,253,76,1,0,0,0,254,256,5,
		45,0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,259,7,1,0,0,
		258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,78,
		1,0,0,0,262,264,5,45,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,
		0,265,267,7,1,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,
		269,1,0,0,0,269,270,1,0,0,0,270,272,5,46,0,0,271,273,7,1,0,0,272,271,1,
		0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,80,1,0,0,0,276,
		278,5,45,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,280,1,0,0,0,279,281,7,
		1,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,
		283,290,1,0,0,0,284,286,5,46,0,0,285,287,7,1,0,0,286,285,1,0,0,0,287,288,
		1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,284,1,0,0,
		0,290,291,1,0,0,0,291,292,1,0,0,0,292,294,7,2,0,0,293,295,7,3,0,0,294,
		293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,7,1,0,0,297,296,1,
		0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,82,1,0,0,0,301,
		303,5,35,0,0,302,304,8,4,0,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,1,
		0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,5,35,0,0,308,84,1,0,0,0,
		309,310,5,116,0,0,310,311,5,114,0,0,311,312,5,117,0,0,312,319,5,101,0,
		0,313,314,5,102,0,0,314,315,5,97,0,0,315,316,5,108,0,0,316,317,5,115,0,
		0,317,319,5,101,0,0,318,309,1,0,0,0,318,313,1,0,0,0,319,86,1,0,0,0,320,
		321,5,78,0,0,321,322,5,85,0,0,322,323,5,76,0,0,323,324,5,76,0,0,324,88,
		1,0,0,0,325,329,7,5,0,0,326,328,7,6,0,0,327,326,1,0,0,0,328,331,1,0,0,
		0,329,327,1,0,0,0,329,330,1,0,0,0,330,90,1,0,0,0,331,329,1,0,0,0,332,336,
		5,91,0,0,333,337,8,7,0,0,334,335,5,92,0,0,335,337,5,93,0,0,336,333,1,0,
		0,0,336,334,1,0,0,0,337,338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
		340,1,0,0,0,340,341,5,93,0,0,341,92,1,0,0,0,342,344,5,96,0,0,343,345,8,
		8,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,
		347,348,1,0,0,0,348,349,5,96,0,0,349,94,1,0,0,0,350,352,7,9,0,0,351,350,
		1,0,0,0,352,353,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,
		0,355,356,6,47,0,0,356,96,1,0,0,0,21,0,247,249,255,260,263,268,274,277,
		282,288,290,294,299,305,318,329,336,338,346,353,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
