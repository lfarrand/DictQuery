//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="QueryParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IQueryVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>ExpressionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionQuery([NotNull] QueryParser.ExpressionQueryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionQuery([NotNull] QueryParser.FunctionQueryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IsNotNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIsNotNullCondition([NotNull] QueryParser.IsNotNullConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpression([NotNull] QueryParser.LiteralExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IsNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIsNullCondition([NotNull] QueryParser.IsNullConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] QueryParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LikeCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLikeCondition([NotNull] QueryParser.LikeConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpression([NotNull] QueryParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] QueryParser.LogicalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParentChildExpr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParentChildExpr([NotNull] QueryParser.ParentChildExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionExpression([NotNull] QueryParser.FunctionExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BinaryCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBinaryCondition([NotNull] QueryParser.BinaryConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ColumnExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumnExpression([NotNull] QueryParser.ColumnExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInCondition([NotNull] QueryParser.InConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenExpression([NotNull] QueryParser.ParenExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BetweenCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBetweenCondition([NotNull] QueryParser.BetweenConditionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConvertFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConvertFunction([NotNull] QueryParser.ConvertFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LenFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLenFunction([NotNull] QueryParser.LenFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IsNullFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIsNullFunction([NotNull] QueryParser.IsNullFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IifFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIifFunction([NotNull] QueryParser.IifFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTrimFunction([NotNull] QueryParser.TrimFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>SubstringFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubstringFunction([NotNull] QueryParser.SubstringFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>AggregateFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAggregateFunction([NotNull] QueryParser.AggregateFunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] QueryParser.TypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.aggregate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAggregate([NotNull] QueryParser.AggregateContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.parentChildExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParentChildExpression([NotNull] QueryParser.ParentChildExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.relationColumn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationColumn([NotNull] QueryParser.RelationColumnContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.literalList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralList([NotNull] QueryParser.LiteralListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] QueryParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="QueryParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumnName([NotNull] QueryParser.ColumnNameContext context);
}
