//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class QueryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, STRING_LITERAL=38, 
		INTEGER=39, DECIMAL=40, SCIENTIFIC=41, DATE_LITERAL=42, BOOLEAN=43, NULL=44, 
		IDENTIFIER=45, BRACKETED_IDENTIFIER=46, GRAVE_IDENTIFIER=47, WHITESPACE=48;
	public const int
		RULE_query = 0, RULE_expression = 1, RULE_function = 2, RULE_type = 3, 
		RULE_aggregate = 4, RULE_parentChildExpression = 5, RULE_relationColumn = 6, 
		RULE_literalList = 7, RULE_literal = 8, RULE_columnName = 9;
	public static readonly string[] ruleNames = {
		"query", "expression", "function", "type", "aggregate", "parentChildExpression", 
		"relationColumn", "literalList", "literal", "columnName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'NOT'", "'AND'", "'OR'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'='", "'<>'", "'>'", "'<'", "'>='", "'<='", "'LIKE'", "'IS'", 
		"'IN'", "'BETWEEN'", "'CONVERT'", "','", "'LEN'", "'ISNULL'", "'IIF'", 
		"'TRIM'", "'SUBSTRING'", "'SUM'", "'AVG'", "'MIN'", "'MAX'", "'COUNT'", 
		"'STDEV'", "'VAR'", "'PARENT'", "'.'", "'CHILD'", null, null, null, null, 
		null, null, "'NULL'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRING_LITERAL", "INTEGER", "DECIMAL", "SCIENTIFIC", "DATE_LITERAL", 
		"BOOLEAN", "NULL", "IDENTIFIER", "BRACKETED_IDENTIFIER", "GRAVE_IDENTIFIER", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Query.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
	 
		public QueryContext() { }
		public virtual void CopyFrom(QueryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FunctionQueryContext : QueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public FunctionQueryContext(QueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterFunctionQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitFunctionQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionQueryContext : QueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryParser.Eof, 0); }
		public ExpressionQueryContext(QueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterExpressionQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitExpressionQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		try {
			State = 26;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new ExpressionQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				expression(0);
				State = 21;
				Match(Eof);
				}
				break;
			case 2:
				_localctx = new FunctionQueryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				function();
				State = 24;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsNotNullConditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryParser.NULL, 0); }
		public IsNotNullConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterIsNotNullCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitIsNotNullCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNotNullCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullConditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryParser.NULL, 0); }
		public IsNullConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterIsNullCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitIsNullCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikeConditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryParser.STRING_LITERAL, 0); }
		public LikeConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLikeCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLikeCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArithmeticExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentChildExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParentChildExpressionContext parentChildExpression() {
			return GetRuleContext<ParentChildExpressionContext>(0);
		}
		public ParentChildExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterParentChildExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitParentChildExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentChildExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryConditionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterBinaryCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitBinaryCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		public ColumnExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterColumnExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitColumnExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InConditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralListContext literalList() {
			return GetRuleContext<LiteralListContext>(0);
		}
		public InConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterInCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitInCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInCondition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenConditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BetweenConditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterBetweenCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitBetweenCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 29;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ColumnExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				columnName();
				}
				break;
			case 3:
				{
				_localctx = new ParentChildExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 31;
				parentChildExpression();
				}
				break;
			case 4:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 32;
				function();
				}
				break;
			case 5:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 33;
				Match(T__0);
				State = 34;
				expression(0);
				State = 35;
				Match(T__1);
				}
				break;
			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				Match(T__2);
				State = 38;
				expression(9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 75;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 73;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 41;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 42;
						((LogicalExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__3 || _la==T__4) ) {
							((LogicalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 43;
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 45;
						((ArithmeticExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1984L) != 0)) ) {
							((ArithmeticExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 46;
						expression(8);
						}
						break;
					case 3:
						{
						_localctx = new BinaryConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 48;
						((BinaryConditionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 129024L) != 0)) ) {
							((BinaryConditionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 49;
						expression(7);
						}
						break;
					case 4:
						{
						_localctx = new BetweenConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 51;
						Match(T__19);
						State = 52;
						expression(0);
						State = 53;
						Match(T__3);
						State = 54;
						expression(2);
						}
						break;
					case 5:
						{
						_localctx = new LikeConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 57;
						Match(T__16);
						State = 58;
						Match(STRING_LITERAL);
						}
						break;
					case 6:
						{
						_localctx = new IsNullConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 59;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 60;
						Match(T__17);
						State = 61;
						Match(NULL);
						}
						break;
					case 7:
						{
						_localctx = new IsNotNullConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 62;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 63;
						Match(T__17);
						State = 64;
						Match(T__2);
						State = 65;
						Match(NULL);
						}
						break;
					case 8:
						{
						_localctx = new InConditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 66;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 67;
						Match(T__18);
						State = 68;
						Match(T__0);
						State = 70;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34909494181888L) != 0)) {
							{
							State = 69;
							literalList();
							}
						}

						State = 72;
						Match(T__1);
						}
						break;
					}
					} 
				}
				State = 77;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
	 
		public FunctionContext() { }
		public virtual void CopyFrom(FunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrimFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TrimFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParentChildExpressionContext parentChildExpression() {
			return GetRuleContext<ParentChildExpressionContext>(0);
		}
		public AggregateFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterAggregateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitAggregateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConvertFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConvertFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterConvertFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitConvertFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IifFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterIifFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitIifFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIifFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LenFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LenFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLenFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLenFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLenFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IsNullFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterIsNullFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitIsNullFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstringFunctionContext : FunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubstringFunctionContext(FunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				_localctx = new ConvertFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				Match(T__20);
				State = 79;
				Match(T__0);
				State = 80;
				expression(0);
				State = 81;
				Match(T__21);
				State = 82;
				type();
				State = 83;
				Match(T__1);
				}
				break;
			case T__22:
				_localctx = new LenFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				Match(T__22);
				State = 86;
				Match(T__0);
				State = 87;
				expression(0);
				State = 88;
				Match(T__1);
				}
				break;
			case T__23:
				_localctx = new IsNullFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				Match(T__23);
				State = 91;
				Match(T__0);
				State = 92;
				expression(0);
				State = 93;
				Match(T__21);
				State = 94;
				expression(0);
				State = 95;
				Match(T__1);
				}
				break;
			case T__24:
				_localctx = new IifFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 97;
				Match(T__24);
				State = 98;
				Match(T__0);
				State = 99;
				expression(0);
				State = 100;
				Match(T__21);
				State = 101;
				expression(0);
				State = 102;
				Match(T__21);
				State = 103;
				expression(0);
				State = 104;
				Match(T__1);
				}
				break;
			case T__25:
				_localctx = new TrimFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 106;
				Match(T__25);
				State = 107;
				Match(T__0);
				State = 108;
				expression(0);
				State = 109;
				Match(T__1);
				}
				break;
			case T__26:
				_localctx = new SubstringFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 111;
				Match(T__26);
				State = 112;
				Match(T__0);
				State = 113;
				expression(0);
				State = 114;
				Match(T__21);
				State = 115;
				expression(0);
				State = 116;
				Match(T__21);
				State = 117;
				expression(0);
				State = 118;
				Match(T__1);
				}
				break;
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
				_localctx = new AggregateFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 120;
				aggregate();
				State = 121;
				Match(T__0);
				State = 122;
				parentChildExpression();
				State = 123;
				Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryParser.STRING_LITERAL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 8, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34091302912L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentChildExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationColumnContext relationColumn() {
			return GetRuleContext<RelationColumnContext>(0);
		}
		public ParentChildExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentChildExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterParentChildExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitParentChildExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentChildExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentChildExpressionContext parentChildExpression() {
		ParentChildExpressionContext _localctx = new ParentChildExpressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_parentChildExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			relationColumn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		public RelationColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterRelationColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitRelationColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationColumnContext relationColumn() {
		RelationColumnContext _localctx = new RelationColumnContext(Context, State);
		EnterRule(_localctx, 12, RULE_relationColumn);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__34:
				{
				State = 133;
				Match(T__34);
				State = 134;
				Match(T__35);
				}
				break;
			case T__36:
				{
				State = 135;
				Match(T__36);
				State = 136;
				Match(T__35);
				}
				break;
			case IDENTIFIER:
			case BRACKETED_IDENTIFIER:
			case GRAVE_IDENTIFIER:
				break;
			default:
				break;
			}
			State = 139;
			columnName();
			State = 144;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 140;
					Match(T__35);
					State = 141;
					columnName();
					}
					} 
				}
				State = 146;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public LiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralListContext literalList() {
		LiteralListContext _localctx = new LiteralListContext(Context, State);
		EnterRule(_localctx, 14, RULE_literalList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			literal();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__21) {
				{
				{
				State = 148;
				Match(T__21);
				State = 149;
				literal();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(QueryParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCIENTIFIC() { return GetToken(QueryParser.SCIENTIFIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_LITERAL() { return GetToken(QueryParser.DATE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 16, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34909494181888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BRACKETED_IDENTIFIER() { return GetToken(QueryParser.BRACKETED_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRAVE_IDENTIFIER() { return GetToken(QueryParser.GRAVE_IDENTIFIER, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IQueryListener typedListener = listener as IQueryListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryVisitor<TResult> typedVisitor = visitor as IQueryVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_columnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 246290604621824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 1);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,48,160,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,0,1,0,1,0,1,0,3,0,27,8,0,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,40,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,71,8,1,1,1,5,1,74,8,1,10,1,12,1,77,9,1,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,126,8,2,1,3,1,3,1,4,1,4,1,5,1,5,
		1,6,1,6,1,6,1,6,3,6,138,8,6,1,6,1,6,1,6,5,6,143,8,6,10,6,12,6,146,9,6,
		1,7,1,7,1,7,5,7,151,8,7,10,7,12,7,154,9,7,1,8,1,8,1,9,1,9,1,9,0,1,2,10,
		0,2,4,6,8,10,12,14,16,18,0,6,1,0,4,5,1,0,6,10,1,0,11,16,1,0,28,34,1,0,
		38,44,1,0,45,47,174,0,26,1,0,0,0,2,39,1,0,0,0,4,125,1,0,0,0,6,127,1,0,
		0,0,8,129,1,0,0,0,10,131,1,0,0,0,12,137,1,0,0,0,14,147,1,0,0,0,16,155,
		1,0,0,0,18,157,1,0,0,0,20,21,3,2,1,0,21,22,5,0,0,1,22,27,1,0,0,0,23,24,
		3,4,2,0,24,25,5,0,0,1,25,27,1,0,0,0,26,20,1,0,0,0,26,23,1,0,0,0,27,1,1,
		0,0,0,28,29,6,1,-1,0,29,40,3,16,8,0,30,40,3,18,9,0,31,40,3,10,5,0,32,40,
		3,4,2,0,33,34,5,1,0,0,34,35,3,2,1,0,35,36,5,2,0,0,36,40,1,0,0,0,37,38,
		5,3,0,0,38,40,3,2,1,9,39,28,1,0,0,0,39,30,1,0,0,0,39,31,1,0,0,0,39,32,
		1,0,0,0,39,33,1,0,0,0,39,37,1,0,0,0,40,75,1,0,0,0,41,42,10,8,0,0,42,43,
		7,0,0,0,43,74,3,2,1,9,44,45,10,7,0,0,45,46,7,1,0,0,46,74,3,2,1,8,47,48,
		10,6,0,0,48,49,7,2,0,0,49,74,3,2,1,7,50,51,10,1,0,0,51,52,5,20,0,0,52,
		53,3,2,1,0,53,54,5,4,0,0,54,55,3,2,1,2,55,74,1,0,0,0,56,57,10,5,0,0,57,
		58,5,17,0,0,58,74,5,38,0,0,59,60,10,4,0,0,60,61,5,18,0,0,61,74,5,44,0,
		0,62,63,10,3,0,0,63,64,5,18,0,0,64,65,5,3,0,0,65,74,5,44,0,0,66,67,10,
		2,0,0,67,68,5,19,0,0,68,70,5,1,0,0,69,71,3,14,7,0,70,69,1,0,0,0,70,71,
		1,0,0,0,71,72,1,0,0,0,72,74,5,2,0,0,73,41,1,0,0,0,73,44,1,0,0,0,73,47,
		1,0,0,0,73,50,1,0,0,0,73,56,1,0,0,0,73,59,1,0,0,0,73,62,1,0,0,0,73,66,
		1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,3,1,0,0,0,77,75,1,
		0,0,0,78,79,5,21,0,0,79,80,5,1,0,0,80,81,3,2,1,0,81,82,5,22,0,0,82,83,
		3,6,3,0,83,84,5,2,0,0,84,126,1,0,0,0,85,86,5,23,0,0,86,87,5,1,0,0,87,88,
		3,2,1,0,88,89,5,2,0,0,89,126,1,0,0,0,90,91,5,24,0,0,91,92,5,1,0,0,92,93,
		3,2,1,0,93,94,5,22,0,0,94,95,3,2,1,0,95,96,5,2,0,0,96,126,1,0,0,0,97,98,
		5,25,0,0,98,99,5,1,0,0,99,100,3,2,1,0,100,101,5,22,0,0,101,102,3,2,1,0,
		102,103,5,22,0,0,103,104,3,2,1,0,104,105,5,2,0,0,105,126,1,0,0,0,106,107,
		5,26,0,0,107,108,5,1,0,0,108,109,3,2,1,0,109,110,5,2,0,0,110,126,1,0,0,
		0,111,112,5,27,0,0,112,113,5,1,0,0,113,114,3,2,1,0,114,115,5,22,0,0,115,
		116,3,2,1,0,116,117,5,22,0,0,117,118,3,2,1,0,118,119,5,2,0,0,119,126,1,
		0,0,0,120,121,3,8,4,0,121,122,5,1,0,0,122,123,3,10,5,0,123,124,5,2,0,0,
		124,126,1,0,0,0,125,78,1,0,0,0,125,85,1,0,0,0,125,90,1,0,0,0,125,97,1,
		0,0,0,125,106,1,0,0,0,125,111,1,0,0,0,125,120,1,0,0,0,126,5,1,0,0,0,127,
		128,5,38,0,0,128,7,1,0,0,0,129,130,7,3,0,0,130,9,1,0,0,0,131,132,3,12,
		6,0,132,11,1,0,0,0,133,134,5,35,0,0,134,138,5,36,0,0,135,136,5,37,0,0,
		136,138,5,36,0,0,137,133,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,139,
		1,0,0,0,139,144,3,18,9,0,140,141,5,36,0,0,141,143,3,18,9,0,142,140,1,0,
		0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,13,1,0,0,0,146,
		144,1,0,0,0,147,152,3,16,8,0,148,149,5,22,0,0,149,151,3,16,8,0,150,148,
		1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,15,1,0,0,0,
		154,152,1,0,0,0,155,156,7,4,0,0,156,17,1,0,0,0,157,158,7,5,0,0,158,19,
		1,0,0,0,9,26,39,70,73,75,125,137,144,152
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
