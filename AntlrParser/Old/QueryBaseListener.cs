//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IQueryListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class QueryBaseListener : IQueryListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionQuery([NotNull] QueryParser.ExpressionQueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionQuery([NotNull] QueryParser.ExpressionQueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionQuery([NotNull] QueryParser.FunctionQueryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionQuery([NotNull] QueryParser.FunctionQueryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsNotNullCondition([NotNull] QueryParser.IsNotNullConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsNotNullCondition([NotNull] QueryParser.IsNotNullConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpression([NotNull] QueryParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpression([NotNull] QueryParser.LiteralExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsNullCondition([NotNull] QueryParser.IsNullConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsNullCondition([NotNull] QueryParser.IsNullConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpression([NotNull] QueryParser.NotExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpression([NotNull] QueryParser.NotExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LikeCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLikeCondition([NotNull] QueryParser.LikeConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LikeCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLikeCondition([NotNull] QueryParser.LikeConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArithmeticExpression([NotNull] QueryParser.ArithmeticExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArithmeticExpression([NotNull] QueryParser.ArithmeticExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLogicalExpression([NotNull] QueryParser.LogicalExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLogicalExpression([NotNull] QueryParser.LogicalExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParentChildExpr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentChildExpr([NotNull] QueryParser.ParentChildExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParentChildExpr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentChildExpr([NotNull] QueryParser.ParentChildExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionExpression([NotNull] QueryParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionExpression([NotNull] QueryParser.FunctionExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBinaryCondition([NotNull] QueryParser.BinaryConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBinaryCondition([NotNull] QueryParser.BinaryConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ColumnExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumnExpression([NotNull] QueryParser.ColumnExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ColumnExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumnExpression([NotNull] QueryParser.ColumnExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>InCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInCondition([NotNull] QueryParser.InConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>InCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInCondition([NotNull] QueryParser.InConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpression([NotNull] QueryParser.ParenExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpression([NotNull] QueryParser.ParenExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BetweenCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBetweenCondition([NotNull] QueryParser.BetweenConditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BetweenCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBetweenCondition([NotNull] QueryParser.BetweenConditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConvertFunction([NotNull] QueryParser.ConvertFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConvertFunction([NotNull] QueryParser.ConvertFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>LenFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLenFunction([NotNull] QueryParser.LenFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>LenFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLenFunction([NotNull] QueryParser.LenFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIsNullFunction([NotNull] QueryParser.IsNullFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIsNullFunction([NotNull] QueryParser.IsNullFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IifFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIifFunction([NotNull] QueryParser.IifFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IifFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIifFunction([NotNull] QueryParser.IifFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTrimFunction([NotNull] QueryParser.TrimFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTrimFunction([NotNull] QueryParser.TrimFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubstringFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubstringFunction([NotNull] QueryParser.SubstringFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubstringFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubstringFunction([NotNull] QueryParser.SubstringFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AggregateFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAggregateFunction([NotNull] QueryParser.AggregateFunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AggregateFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAggregateFunction([NotNull] QueryParser.AggregateFunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] QueryParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] QueryParser.TypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.aggregate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAggregate([NotNull] QueryParser.AggregateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.aggregate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAggregate([NotNull] QueryParser.AggregateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.parentChildExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentChildExpression([NotNull] QueryParser.ParentChildExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.parentChildExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentChildExpression([NotNull] QueryParser.ParentChildExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.relationColumn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationColumn([NotNull] QueryParser.RelationColumnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.relationColumn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationColumn([NotNull] QueryParser.RelationColumnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.literalList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralList([NotNull] QueryParser.LiteralListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.literalList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralList([NotNull] QueryParser.LiteralListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] QueryParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] QueryParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.columnName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterColumnName([NotNull] QueryParser.ColumnNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.columnName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitColumnName([NotNull] QueryParser.ColumnNameContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
