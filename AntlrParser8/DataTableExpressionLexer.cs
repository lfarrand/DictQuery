//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DataTableExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DataTableExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, NOT_EQUALS=2, LESS_THAN=3, LESS_THAN_OR_EQUAL=4, GREATER_THAN=5, 
		GREATER_THAN_OR_EQUAL=6, PLUS=7, MINUS=8, MULTIPLY=9, DIVIDE=10, MODULO=11, 
		AND=12, OR=13, NOT=14, LIKE=15, IN=16, CONVERT=17, LEN=18, ISNULL=19, 
		IIF=20, TRIM=21, SUBSTRING=22, SUM=23, AVG=24, MIN=25, MAX=26, COUNT=27, 
		STDEV=28, VAR=29, PARENT=30, CHILD=31, NULL=32, IS=33, LPAREN=34, RPAREN=35, 
		LBRACKET=36, RBRACKET=37, BACKTICK=38, DOT=39, COMMA=40, HASH=41, STRING_LITERAL=42, 
		DATE_LITERAL=43, INTEGER_LITERAL=44, DECIMAL_LITERAL=45, BOOLEAN_LITERAL=46, 
		NULL_LITERAL=47, IDENTIFIER=48, BRACKETED_IDENTIFIER=49, WS=50;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"AND", "OR", "NOT", "LIKE", "IN", "CONVERT", "LEN", "ISNULL", "IIF", "TRIM", 
		"SUBSTRING", "SUM", "AVG", "MIN", "MAX", "COUNT", "STDEV", "VAR", "PARENT", 
		"CHILD", "TRUE", "FALSE", "NULL", "IS", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "BACKTICK", "DOT", "COMMA", "HASH", "STRING_LITERAL", "DATE_LITERAL", 
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "BOOLEAN_LITERAL", "NULL_LITERAL", 
		"IDENTIFIER", "BRACKETED_IDENTIFIER", "WS"
	};


	public DataTableExpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DataTableExpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", 
		"'%'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'('", 
		"')'", "'['", "']'", "'`'", "'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"AND", "OR", "NOT", "LIKE", "IN", "CONVERT", "LEN", "ISNULL", "IIF", "TRIM", 
		"SUBSTRING", "SUM", "AVG", "MIN", "MAX", "COUNT", "STDEV", "VAR", "PARENT", 
		"CHILD", "NULL", "IS", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "BACKTICK", 
		"DOT", "COMMA", "HASH", "STRING_LITERAL", "DATE_LITERAL", "INTEGER_LITERAL", 
		"DECIMAL_LITERAL", "BOOLEAN_LITERAL", "NULL_LITERAL", "IDENTIFIER", "BRACKETED_IDENTIFIER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DataTableExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DataTableExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,496,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,3,0,109,8,0,1,1,1,1,1,1,1,1,3,1,115,
		8,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
		9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,143,8,11,1,12,1,12,
		1,12,1,12,3,12,149,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,157,8,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,167,8,14,1,15,1,15,1,15,1,15,
		3,15,173,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,3,16,189,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,197,8,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,211,8,
		18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,219,8,19,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,229,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,249,8,21,1,22,1,22,
		1,22,1,22,1,22,1,22,3,22,257,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,265,
		8,23,1,24,1,24,1,24,1,24,1,24,1,24,3,24,273,8,24,1,25,1,25,1,25,1,25,1,
		25,1,25,3,25,281,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,293,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,305,
		8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,313,8,28,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,327,8,29,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,1,30,1,30,3,30,339,8,30,1,31,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,3,31,349,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
		1,32,3,32,361,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,371,8,
		33,1,34,1,34,1,34,1,34,3,34,377,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,5,43,
		399,8,43,10,43,12,43,402,9,43,1,43,1,43,1,44,1,44,4,44,408,8,44,11,44,
		12,44,409,1,44,1,44,1,44,4,44,415,8,44,11,44,12,44,416,1,44,1,44,4,44,
		421,8,44,11,44,12,44,422,1,44,1,44,4,44,427,8,44,11,44,12,44,428,1,44,
		3,44,432,8,44,1,45,3,45,435,8,45,1,45,4,45,438,8,45,11,45,12,45,439,1,
		46,3,46,443,8,46,1,46,5,46,446,8,46,10,46,12,46,449,9,46,1,46,1,46,4,46,
		453,8,46,11,46,12,46,454,1,46,1,46,3,46,459,8,46,1,46,4,46,462,8,46,11,
		46,12,46,463,3,46,466,8,46,1,47,1,47,3,47,470,8,47,1,48,1,48,1,49,1,49,
		5,49,476,8,49,10,49,12,49,479,9,49,1,50,1,50,5,50,483,8,50,10,50,12,50,
		486,9,50,1,50,1,50,1,51,4,51,491,8,51,11,51,12,51,492,1,51,1,51,0,0,52,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,0,65,0,67,32,69,33,71,34,73,35,75,36,
		77,37,79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,
		101,49,103,50,1,0,9,1,0,39,39,1,0,35,35,1,0,48,57,2,0,43,43,45,45,2,0,
		69,69,101,101,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
		93,93,3,0,9,10,13,13,32,32,538,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
		1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
		0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,108,1,0,0,0,3,114,1,0,0,0,5,116,
		1,0,0,0,7,118,1,0,0,0,9,121,1,0,0,0,11,123,1,0,0,0,13,126,1,0,0,0,15,128,
		1,0,0,0,17,130,1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,0,23,142,1,0,0,0,25,
		148,1,0,0,0,27,156,1,0,0,0,29,166,1,0,0,0,31,172,1,0,0,0,33,188,1,0,0,
		0,35,196,1,0,0,0,37,210,1,0,0,0,39,218,1,0,0,0,41,228,1,0,0,0,43,248,1,
		0,0,0,45,256,1,0,0,0,47,264,1,0,0,0,49,272,1,0,0,0,51,280,1,0,0,0,53,292,
		1,0,0,0,55,304,1,0,0,0,57,312,1,0,0,0,59,326,1,0,0,0,61,338,1,0,0,0,63,
		348,1,0,0,0,65,360,1,0,0,0,67,370,1,0,0,0,69,376,1,0,0,0,71,378,1,0,0,
		0,73,380,1,0,0,0,75,382,1,0,0,0,77,384,1,0,0,0,79,386,1,0,0,0,81,388,1,
		0,0,0,83,390,1,0,0,0,85,392,1,0,0,0,87,394,1,0,0,0,89,431,1,0,0,0,91,434,
		1,0,0,0,93,442,1,0,0,0,95,469,1,0,0,0,97,471,1,0,0,0,99,473,1,0,0,0,101,
		480,1,0,0,0,103,490,1,0,0,0,105,109,5,61,0,0,106,107,5,61,0,0,107,109,
		5,61,0,0,108,105,1,0,0,0,108,106,1,0,0,0,109,2,1,0,0,0,110,111,5,60,0,
		0,111,115,5,62,0,0,112,113,5,33,0,0,113,115,5,61,0,0,114,110,1,0,0,0,114,
		112,1,0,0,0,115,4,1,0,0,0,116,117,5,60,0,0,117,6,1,0,0,0,118,119,5,60,
		0,0,119,120,5,61,0,0,120,8,1,0,0,0,121,122,5,62,0,0,122,10,1,0,0,0,123,
		124,5,62,0,0,124,125,5,61,0,0,125,12,1,0,0,0,126,127,5,43,0,0,127,14,1,
		0,0,0,128,129,5,45,0,0,129,16,1,0,0,0,130,131,5,42,0,0,131,18,1,0,0,0,
		132,133,5,47,0,0,133,20,1,0,0,0,134,135,5,37,0,0,135,22,1,0,0,0,136,137,
		5,65,0,0,137,138,5,78,0,0,138,143,5,68,0,0,139,140,5,97,0,0,140,141,5,
		110,0,0,141,143,5,100,0,0,142,136,1,0,0,0,142,139,1,0,0,0,143,24,1,0,0,
		0,144,145,5,79,0,0,145,149,5,82,0,0,146,147,5,111,0,0,147,149,5,114,0,
		0,148,144,1,0,0,0,148,146,1,0,0,0,149,26,1,0,0,0,150,151,5,78,0,0,151,
		152,5,79,0,0,152,157,5,84,0,0,153,154,5,110,0,0,154,155,5,111,0,0,155,
		157,5,116,0,0,156,150,1,0,0,0,156,153,1,0,0,0,157,28,1,0,0,0,158,159,5,
		76,0,0,159,160,5,73,0,0,160,161,5,75,0,0,161,167,5,69,0,0,162,163,5,108,
		0,0,163,164,5,105,0,0,164,165,5,107,0,0,165,167,5,101,0,0,166,158,1,0,
		0,0,166,162,1,0,0,0,167,30,1,0,0,0,168,169,5,73,0,0,169,173,5,78,0,0,170,
		171,5,105,0,0,171,173,5,110,0,0,172,168,1,0,0,0,172,170,1,0,0,0,173,32,
		1,0,0,0,174,175,5,67,0,0,175,176,5,79,0,0,176,177,5,78,0,0,177,178,5,86,
		0,0,178,179,5,69,0,0,179,180,5,82,0,0,180,189,5,84,0,0,181,182,5,99,0,
		0,182,183,5,111,0,0,183,184,5,110,0,0,184,185,5,118,0,0,185,186,5,101,
		0,0,186,187,5,114,0,0,187,189,5,116,0,0,188,174,1,0,0,0,188,181,1,0,0,
		0,189,34,1,0,0,0,190,191,5,76,0,0,191,192,5,69,0,0,192,197,5,78,0,0,193,
		194,5,108,0,0,194,195,5,101,0,0,195,197,5,110,0,0,196,190,1,0,0,0,196,
		193,1,0,0,0,197,36,1,0,0,0,198,199,5,73,0,0,199,200,5,83,0,0,200,201,5,
		78,0,0,201,202,5,85,0,0,202,203,5,76,0,0,203,211,5,76,0,0,204,205,5,105,
		0,0,205,206,5,115,0,0,206,207,5,110,0,0,207,208,5,117,0,0,208,209,5,108,
		0,0,209,211,5,108,0,0,210,198,1,0,0,0,210,204,1,0,0,0,211,38,1,0,0,0,212,
		213,5,73,0,0,213,214,5,73,0,0,214,219,5,70,0,0,215,216,5,105,0,0,216,217,
		5,105,0,0,217,219,5,102,0,0,218,212,1,0,0,0,218,215,1,0,0,0,219,40,1,0,
		0,0,220,221,5,84,0,0,221,222,5,82,0,0,222,223,5,73,0,0,223,229,5,77,0,
		0,224,225,5,116,0,0,225,226,5,114,0,0,226,227,5,105,0,0,227,229,5,109,
		0,0,228,220,1,0,0,0,228,224,1,0,0,0,229,42,1,0,0,0,230,231,5,83,0,0,231,
		232,5,85,0,0,232,233,5,66,0,0,233,234,5,83,0,0,234,235,5,84,0,0,235,236,
		5,82,0,0,236,237,5,73,0,0,237,238,5,78,0,0,238,249,5,71,0,0,239,240,5,
		115,0,0,240,241,5,117,0,0,241,242,5,98,0,0,242,243,5,115,0,0,243,244,5,
		116,0,0,244,245,5,114,0,0,245,246,5,105,0,0,246,247,5,110,0,0,247,249,
		5,103,0,0,248,230,1,0,0,0,248,239,1,0,0,0,249,44,1,0,0,0,250,251,5,83,
		0,0,251,252,5,85,0,0,252,257,5,77,0,0,253,254,5,115,0,0,254,255,5,117,
		0,0,255,257,5,109,0,0,256,250,1,0,0,0,256,253,1,0,0,0,257,46,1,0,0,0,258,
		259,5,65,0,0,259,260,5,86,0,0,260,265,5,71,0,0,261,262,5,97,0,0,262,263,
		5,118,0,0,263,265,5,103,0,0,264,258,1,0,0,0,264,261,1,0,0,0,265,48,1,0,
		0,0,266,267,5,77,0,0,267,268,5,73,0,0,268,273,5,78,0,0,269,270,5,109,0,
		0,270,271,5,105,0,0,271,273,5,110,0,0,272,266,1,0,0,0,272,269,1,0,0,0,
		273,50,1,0,0,0,274,275,5,77,0,0,275,276,5,65,0,0,276,281,5,88,0,0,277,
		278,5,109,0,0,278,279,5,97,0,0,279,281,5,120,0,0,280,274,1,0,0,0,280,277,
		1,0,0,0,281,52,1,0,0,0,282,283,5,67,0,0,283,284,5,79,0,0,284,285,5,85,
		0,0,285,286,5,78,0,0,286,293,5,84,0,0,287,288,5,99,0,0,288,289,5,111,0,
		0,289,290,5,117,0,0,290,291,5,110,0,0,291,293,5,116,0,0,292,282,1,0,0,
		0,292,287,1,0,0,0,293,54,1,0,0,0,294,295,5,83,0,0,295,296,5,84,0,0,296,
		297,5,68,0,0,297,298,5,69,0,0,298,305,5,86,0,0,299,300,5,115,0,0,300,301,
		5,116,0,0,301,302,5,100,0,0,302,303,5,101,0,0,303,305,5,118,0,0,304,294,
		1,0,0,0,304,299,1,0,0,0,305,56,1,0,0,0,306,307,5,86,0,0,307,308,5,65,0,
		0,308,313,5,82,0,0,309,310,5,118,0,0,310,311,5,97,0,0,311,313,5,114,0,
		0,312,306,1,0,0,0,312,309,1,0,0,0,313,58,1,0,0,0,314,315,5,80,0,0,315,
		316,5,65,0,0,316,317,5,82,0,0,317,318,5,69,0,0,318,319,5,78,0,0,319,327,
		5,84,0,0,320,321,5,112,0,0,321,322,5,97,0,0,322,323,5,114,0,0,323,324,
		5,101,0,0,324,325,5,110,0,0,325,327,5,116,0,0,326,314,1,0,0,0,326,320,
		1,0,0,0,327,60,1,0,0,0,328,329,5,67,0,0,329,330,5,72,0,0,330,331,5,73,
		0,0,331,332,5,76,0,0,332,339,5,68,0,0,333,334,5,99,0,0,334,335,5,104,0,
		0,335,336,5,105,0,0,336,337,5,108,0,0,337,339,5,100,0,0,338,328,1,0,0,
		0,338,333,1,0,0,0,339,62,1,0,0,0,340,341,5,84,0,0,341,342,5,82,0,0,342,
		343,5,85,0,0,343,349,5,69,0,0,344,345,5,116,0,0,345,346,5,114,0,0,346,
		347,5,117,0,0,347,349,5,101,0,0,348,340,1,0,0,0,348,344,1,0,0,0,349,64,
		1,0,0,0,350,351,5,70,0,0,351,352,5,65,0,0,352,353,5,76,0,0,353,354,5,83,
		0,0,354,361,5,69,0,0,355,356,5,102,0,0,356,357,5,97,0,0,357,358,5,108,
		0,0,358,359,5,115,0,0,359,361,5,101,0,0,360,350,1,0,0,0,360,355,1,0,0,
		0,361,66,1,0,0,0,362,363,5,78,0,0,363,364,5,85,0,0,364,365,5,76,0,0,365,
		371,5,76,0,0,366,367,5,110,0,0,367,368,5,117,0,0,368,369,5,108,0,0,369,
		371,5,108,0,0,370,362,1,0,0,0,370,366,1,0,0,0,371,68,1,0,0,0,372,373,5,
		73,0,0,373,377,5,83,0,0,374,375,5,105,0,0,375,377,5,115,0,0,376,372,1,
		0,0,0,376,374,1,0,0,0,377,70,1,0,0,0,378,379,5,40,0,0,379,72,1,0,0,0,380,
		381,5,41,0,0,381,74,1,0,0,0,382,383,5,91,0,0,383,76,1,0,0,0,384,385,5,
		93,0,0,385,78,1,0,0,0,386,387,5,96,0,0,387,80,1,0,0,0,388,389,5,46,0,0,
		389,82,1,0,0,0,390,391,5,44,0,0,391,84,1,0,0,0,392,393,5,35,0,0,393,86,
		1,0,0,0,394,400,5,39,0,0,395,399,8,0,0,0,396,397,5,39,0,0,397,399,5,39,
		0,0,398,395,1,0,0,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,
		401,1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,5,39,0,0,404,88,1,
		0,0,0,405,407,5,35,0,0,406,408,8,1,0,0,407,406,1,0,0,0,408,409,1,0,0,0,
		409,407,1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,432,5,35,0,0,412,414,
		5,39,0,0,413,415,7,2,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,
		0,416,417,1,0,0,0,417,418,1,0,0,0,418,420,5,47,0,0,419,421,7,2,0,0,420,
		419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,424,1,
		0,0,0,424,426,5,47,0,0,425,427,7,2,0,0,426,425,1,0,0,0,427,428,1,0,0,0,
		428,426,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,432,5,39,0,0,431,405,
		1,0,0,0,431,412,1,0,0,0,432,90,1,0,0,0,433,435,7,3,0,0,434,433,1,0,0,0,
		434,435,1,0,0,0,435,437,1,0,0,0,436,438,7,2,0,0,437,436,1,0,0,0,438,439,
		1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,92,1,0,0,0,441,443,7,3,0,0,
		442,441,1,0,0,0,442,443,1,0,0,0,443,447,1,0,0,0,444,446,7,2,0,0,445,444,
		1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,
		0,449,447,1,0,0,0,450,452,5,46,0,0,451,453,7,2,0,0,452,451,1,0,0,0,453,
		454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,465,1,0,0,0,456,458,7,
		4,0,0,457,459,7,3,0,0,458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,
		460,462,7,2,0,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,464,
		1,0,0,0,464,466,1,0,0,0,465,456,1,0,0,0,465,466,1,0,0,0,466,94,1,0,0,0,
		467,470,3,63,31,0,468,470,3,65,32,0,469,467,1,0,0,0,469,468,1,0,0,0,470,
		96,1,0,0,0,471,472,3,67,33,0,472,98,1,0,0,0,473,477,7,5,0,0,474,476,7,
		6,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,
		478,100,1,0,0,0,479,477,1,0,0,0,480,484,5,91,0,0,481,483,8,7,0,0,482,481,
		1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,487,1,0,0,
		0,486,484,1,0,0,0,487,488,5,93,0,0,488,102,1,0,0,0,489,491,7,8,0,0,490,
		489,1,0,0,0,491,492,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,494,1,
		0,0,0,494,495,6,51,0,0,495,104,1,0,0,0,46,0,108,114,142,148,156,166,172,
		188,196,210,218,228,248,256,264,272,280,292,304,312,326,338,348,360,370,
		376,398,400,409,416,422,428,431,434,439,442,447,454,458,463,465,469,477,
		484,492,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
