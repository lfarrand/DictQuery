//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DataTableExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DataTableExpressionLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUALS=1, NOT_EQUALS=2, LESS_THAN=3, LESS_THAN_OR_EQUAL=4, GREATER_THAN=5, 
		GREATER_THAN_OR_EQUAL=6, PLUS=7, MINUS=8, MULTIPLY=9, DIVIDE=10, MODULO=11, 
		AND=12, OR=13, NOT=14, LIKE=15, IN=16, CONVERT=17, LEN=18, ISNULL=19, 
		IIF=20, TRIM=21, SUBSTRING=22, SUM=23, AVG=24, MIN=25, MAX=26, COUNT=27, 
		STDEV=28, VAR=29, PARENT=30, CHILD=31, NULL=32, IS=33, LPAREN=34, RPAREN=35, 
		LBRACKET=36, RBRACKET=37, BACKTICK=38, DOT=39, COMMA=40, HASH=41, STRING_LITERAL=42, 
		DATE_LITERAL=43, INTEGER_LITERAL=44, DECIMAL_LITERAL=45, BOOLEAN_LITERAL=46, 
		NULL_LITERAL=47, IDENTIFIER=48, WS=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"AND", "OR", "NOT", "LIKE", "IN", "CONVERT", "LEN", "ISNULL", "IIF", "TRIM", 
		"SUBSTRING", "SUM", "AVG", "MIN", "MAX", "COUNT", "STDEV", "VAR", "PARENT", 
		"CHILD", "TRUE", "FALSE", "NULL", "IS", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "BACKTICK", "DOT", "COMMA", "HASH", "STRING_LITERAL", "DATE_LITERAL", 
		"INTEGER_LITERAL", "DECIMAL_LITERAL", "BOOLEAN_LITERAL", "NULL_LITERAL", 
		"IDENTIFIER", "WS"
	};


	public DataTableExpressionLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DataTableExpressionLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", 
		"'/'", "'%'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'('", "')'", "'['", "']'", "'`'", "'.'", "','", "'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUALS", "NOT_EQUALS", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", 
		"GREATER_THAN_OR_EQUAL", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
		"AND", "OR", "NOT", "LIKE", "IN", "CONVERT", "LEN", "ISNULL", "IIF", "TRIM", 
		"SUBSTRING", "SUM", "AVG", "MIN", "MAX", "COUNT", "STDEV", "VAR", "PARENT", 
		"CHILD", "NULL", "IS", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "BACKTICK", 
		"DOT", "COMMA", "HASH", "STRING_LITERAL", "DATE_LITERAL", "INTEGER_LITERAL", 
		"DECIMAL_LITERAL", "BOOLEAN_LITERAL", "NULL_LITERAL", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DataTableExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DataTableExpressionLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,482,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,1,1,1,3,1,110,8,1,1,2,1,2,1,3,1,3,1,3,
		1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
		1,11,1,11,1,11,1,11,3,11,138,8,11,1,12,1,12,1,12,1,12,3,12,144,8,12,1,
		13,1,13,1,13,1,13,1,13,1,13,3,13,152,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,3,14,162,8,14,1,15,1,15,1,15,1,15,3,15,168,8,15,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,184,8,16,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,192,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,206,8,18,1,19,1,19,1,19,1,19,1,19,
		1,19,3,19,214,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,224,8,
		20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,1,21,3,21,244,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,
		252,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,260,8,23,1,24,1,24,1,24,1,
		24,1,24,1,24,3,24,268,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,276,8,25,
		1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,288,8,26,1,27,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,300,8,27,1,28,1,28,1,28,
		1,28,1,28,1,28,3,28,308,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		29,1,29,1,29,1,29,3,29,322,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,3,30,334,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,344,
		8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,356,8,32,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,366,8,33,1,34,1,34,1,34,1,34,
		3,34,372,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,
		40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,5,43,394,8,43,10,43,12,43,397,
		9,43,1,43,1,43,1,44,1,44,4,44,403,8,44,11,44,12,44,404,1,44,1,44,1,44,
		4,44,410,8,44,11,44,12,44,411,1,44,1,44,4,44,416,8,44,11,44,12,44,417,
		1,44,1,44,4,44,422,8,44,11,44,12,44,423,1,44,3,44,427,8,44,1,45,3,45,430,
		8,45,1,45,4,45,433,8,45,11,45,12,45,434,1,46,3,46,438,8,46,1,46,5,46,441,
		8,46,10,46,12,46,444,9,46,1,46,1,46,4,46,448,8,46,11,46,12,46,449,1,46,
		1,46,3,46,454,8,46,1,46,4,46,457,8,46,11,46,12,46,458,3,46,461,8,46,1,
		47,1,47,3,47,465,8,47,1,48,1,48,1,49,1,49,5,49,471,8,49,10,49,12,49,474,
		9,49,1,50,4,50,477,8,50,11,50,12,50,478,1,50,1,50,0,0,51,1,1,3,2,5,3,7,
		4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
		17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
		29,59,30,61,31,63,0,65,0,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,
		39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,49,1,0,8,
		1,0,39,39,1,0,35,35,1,0,48,57,2,0,43,43,45,45,2,0,69,69,101,101,3,0,65,
		90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,522,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
		1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
		0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
		1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,
		0,0,3,109,1,0,0,0,5,111,1,0,0,0,7,113,1,0,0,0,9,116,1,0,0,0,11,118,1,0,
		0,0,13,121,1,0,0,0,15,123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,129,
		1,0,0,0,23,137,1,0,0,0,25,143,1,0,0,0,27,151,1,0,0,0,29,161,1,0,0,0,31,
		167,1,0,0,0,33,183,1,0,0,0,35,191,1,0,0,0,37,205,1,0,0,0,39,213,1,0,0,
		0,41,223,1,0,0,0,43,243,1,0,0,0,45,251,1,0,0,0,47,259,1,0,0,0,49,267,1,
		0,0,0,51,275,1,0,0,0,53,287,1,0,0,0,55,299,1,0,0,0,57,307,1,0,0,0,59,321,
		1,0,0,0,61,333,1,0,0,0,63,343,1,0,0,0,65,355,1,0,0,0,67,365,1,0,0,0,69,
		371,1,0,0,0,71,373,1,0,0,0,73,375,1,0,0,0,75,377,1,0,0,0,77,379,1,0,0,
		0,79,381,1,0,0,0,81,383,1,0,0,0,83,385,1,0,0,0,85,387,1,0,0,0,87,389,1,
		0,0,0,89,426,1,0,0,0,91,429,1,0,0,0,93,437,1,0,0,0,95,464,1,0,0,0,97,466,
		1,0,0,0,99,468,1,0,0,0,101,476,1,0,0,0,103,104,5,61,0,0,104,2,1,0,0,0,
		105,106,5,60,0,0,106,110,5,62,0,0,107,108,5,33,0,0,108,110,5,61,0,0,109,
		105,1,0,0,0,109,107,1,0,0,0,110,4,1,0,0,0,111,112,5,60,0,0,112,6,1,0,0,
		0,113,114,5,60,0,0,114,115,5,61,0,0,115,8,1,0,0,0,116,117,5,62,0,0,117,
		10,1,0,0,0,118,119,5,62,0,0,119,120,5,61,0,0,120,12,1,0,0,0,121,122,5,
		43,0,0,122,14,1,0,0,0,123,124,5,45,0,0,124,16,1,0,0,0,125,126,5,42,0,0,
		126,18,1,0,0,0,127,128,5,47,0,0,128,20,1,0,0,0,129,130,5,37,0,0,130,22,
		1,0,0,0,131,132,5,65,0,0,132,133,5,78,0,0,133,138,5,68,0,0,134,135,5,97,
		0,0,135,136,5,110,0,0,136,138,5,100,0,0,137,131,1,0,0,0,137,134,1,0,0,
		0,138,24,1,0,0,0,139,140,5,79,0,0,140,144,5,82,0,0,141,142,5,111,0,0,142,
		144,5,114,0,0,143,139,1,0,0,0,143,141,1,0,0,0,144,26,1,0,0,0,145,146,5,
		78,0,0,146,147,5,79,0,0,147,152,5,84,0,0,148,149,5,110,0,0,149,150,5,111,
		0,0,150,152,5,116,0,0,151,145,1,0,0,0,151,148,1,0,0,0,152,28,1,0,0,0,153,
		154,5,76,0,0,154,155,5,73,0,0,155,156,5,75,0,0,156,162,5,69,0,0,157,158,
		5,108,0,0,158,159,5,105,0,0,159,160,5,107,0,0,160,162,5,101,0,0,161,153,
		1,0,0,0,161,157,1,0,0,0,162,30,1,0,0,0,163,164,5,73,0,0,164,168,5,78,0,
		0,165,166,5,105,0,0,166,168,5,110,0,0,167,163,1,0,0,0,167,165,1,0,0,0,
		168,32,1,0,0,0,169,170,5,67,0,0,170,171,5,79,0,0,171,172,5,78,0,0,172,
		173,5,86,0,0,173,174,5,69,0,0,174,175,5,82,0,0,175,184,5,84,0,0,176,177,
		5,99,0,0,177,178,5,111,0,0,178,179,5,110,0,0,179,180,5,118,0,0,180,181,
		5,101,0,0,181,182,5,114,0,0,182,184,5,116,0,0,183,169,1,0,0,0,183,176,
		1,0,0,0,184,34,1,0,0,0,185,186,5,76,0,0,186,187,5,69,0,0,187,192,5,78,
		0,0,188,189,5,108,0,0,189,190,5,101,0,0,190,192,5,110,0,0,191,185,1,0,
		0,0,191,188,1,0,0,0,192,36,1,0,0,0,193,194,5,73,0,0,194,195,5,83,0,0,195,
		196,5,78,0,0,196,197,5,85,0,0,197,198,5,76,0,0,198,206,5,76,0,0,199,200,
		5,105,0,0,200,201,5,115,0,0,201,202,5,110,0,0,202,203,5,117,0,0,203,204,
		5,108,0,0,204,206,5,108,0,0,205,193,1,0,0,0,205,199,1,0,0,0,206,38,1,0,
		0,0,207,208,5,73,0,0,208,209,5,73,0,0,209,214,5,70,0,0,210,211,5,105,0,
		0,211,212,5,105,0,0,212,214,5,102,0,0,213,207,1,0,0,0,213,210,1,0,0,0,
		214,40,1,0,0,0,215,216,5,84,0,0,216,217,5,82,0,0,217,218,5,73,0,0,218,
		224,5,77,0,0,219,220,5,116,0,0,220,221,5,114,0,0,221,222,5,105,0,0,222,
		224,5,109,0,0,223,215,1,0,0,0,223,219,1,0,0,0,224,42,1,0,0,0,225,226,5,
		83,0,0,226,227,5,85,0,0,227,228,5,66,0,0,228,229,5,83,0,0,229,230,5,84,
		0,0,230,231,5,82,0,0,231,232,5,73,0,0,232,233,5,78,0,0,233,244,5,71,0,
		0,234,235,5,115,0,0,235,236,5,117,0,0,236,237,5,98,0,0,237,238,5,115,0,
		0,238,239,5,116,0,0,239,240,5,114,0,0,240,241,5,105,0,0,241,242,5,110,
		0,0,242,244,5,103,0,0,243,225,1,0,0,0,243,234,1,0,0,0,244,44,1,0,0,0,245,
		246,5,83,0,0,246,247,5,85,0,0,247,252,5,77,0,0,248,249,5,115,0,0,249,250,
		5,117,0,0,250,252,5,109,0,0,251,245,1,0,0,0,251,248,1,0,0,0,252,46,1,0,
		0,0,253,254,5,65,0,0,254,255,5,86,0,0,255,260,5,71,0,0,256,257,5,97,0,
		0,257,258,5,118,0,0,258,260,5,103,0,0,259,253,1,0,0,0,259,256,1,0,0,0,
		260,48,1,0,0,0,261,262,5,77,0,0,262,263,5,73,0,0,263,268,5,78,0,0,264,
		265,5,109,0,0,265,266,5,105,0,0,266,268,5,110,0,0,267,261,1,0,0,0,267,
		264,1,0,0,0,268,50,1,0,0,0,269,270,5,77,0,0,270,271,5,65,0,0,271,276,5,
		88,0,0,272,273,5,109,0,0,273,274,5,97,0,0,274,276,5,120,0,0,275,269,1,
		0,0,0,275,272,1,0,0,0,276,52,1,0,0,0,277,278,5,67,0,0,278,279,5,79,0,0,
		279,280,5,85,0,0,280,281,5,78,0,0,281,288,5,84,0,0,282,283,5,99,0,0,283,
		284,5,111,0,0,284,285,5,117,0,0,285,286,5,110,0,0,286,288,5,116,0,0,287,
		277,1,0,0,0,287,282,1,0,0,0,288,54,1,0,0,0,289,290,5,83,0,0,290,291,5,
		84,0,0,291,292,5,68,0,0,292,293,5,69,0,0,293,300,5,86,0,0,294,295,5,115,
		0,0,295,296,5,116,0,0,296,297,5,100,0,0,297,298,5,101,0,0,298,300,5,118,
		0,0,299,289,1,0,0,0,299,294,1,0,0,0,300,56,1,0,0,0,301,302,5,86,0,0,302,
		303,5,65,0,0,303,308,5,82,0,0,304,305,5,118,0,0,305,306,5,97,0,0,306,308,
		5,114,0,0,307,301,1,0,0,0,307,304,1,0,0,0,308,58,1,0,0,0,309,310,5,80,
		0,0,310,311,5,65,0,0,311,312,5,82,0,0,312,313,5,69,0,0,313,314,5,78,0,
		0,314,322,5,84,0,0,315,316,5,112,0,0,316,317,5,97,0,0,317,318,5,114,0,
		0,318,319,5,101,0,0,319,320,5,110,0,0,320,322,5,116,0,0,321,309,1,0,0,
		0,321,315,1,0,0,0,322,60,1,0,0,0,323,324,5,67,0,0,324,325,5,72,0,0,325,
		326,5,73,0,0,326,327,5,76,0,0,327,334,5,68,0,0,328,329,5,99,0,0,329,330,
		5,104,0,0,330,331,5,105,0,0,331,332,5,108,0,0,332,334,5,100,0,0,333,323,
		1,0,0,0,333,328,1,0,0,0,334,62,1,0,0,0,335,336,5,84,0,0,336,337,5,82,0,
		0,337,338,5,85,0,0,338,344,5,69,0,0,339,340,5,116,0,0,340,341,5,114,0,
		0,341,342,5,117,0,0,342,344,5,101,0,0,343,335,1,0,0,0,343,339,1,0,0,0,
		344,64,1,0,0,0,345,346,5,70,0,0,346,347,5,65,0,0,347,348,5,76,0,0,348,
		349,5,83,0,0,349,356,5,69,0,0,350,351,5,102,0,0,351,352,5,97,0,0,352,353,
		5,108,0,0,353,354,5,115,0,0,354,356,5,101,0,0,355,345,1,0,0,0,355,350,
		1,0,0,0,356,66,1,0,0,0,357,358,5,78,0,0,358,359,5,85,0,0,359,360,5,76,
		0,0,360,366,5,76,0,0,361,362,5,110,0,0,362,363,5,117,0,0,363,364,5,108,
		0,0,364,366,5,108,0,0,365,357,1,0,0,0,365,361,1,0,0,0,366,68,1,0,0,0,367,
		368,5,73,0,0,368,372,5,83,0,0,369,370,5,105,0,0,370,372,5,115,0,0,371,
		367,1,0,0,0,371,369,1,0,0,0,372,70,1,0,0,0,373,374,5,40,0,0,374,72,1,0,
		0,0,375,376,5,41,0,0,376,74,1,0,0,0,377,378,5,91,0,0,378,76,1,0,0,0,379,
		380,5,93,0,0,380,78,1,0,0,0,381,382,5,96,0,0,382,80,1,0,0,0,383,384,5,
		46,0,0,384,82,1,0,0,0,385,386,5,44,0,0,386,84,1,0,0,0,387,388,5,35,0,0,
		388,86,1,0,0,0,389,395,5,39,0,0,390,394,8,0,0,0,391,392,5,39,0,0,392,394,
		5,39,0,0,393,390,1,0,0,0,393,391,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,
		0,395,396,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,5,39,0,0,399,
		88,1,0,0,0,400,402,5,35,0,0,401,403,8,1,0,0,402,401,1,0,0,0,403,404,1,
		0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,427,5,35,0,0,
		407,409,5,39,0,0,408,410,7,2,0,0,409,408,1,0,0,0,410,411,1,0,0,0,411,409,
		1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,415,5,47,0,0,414,416,7,2,0,
		0,415,414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,
		419,1,0,0,0,419,421,5,47,0,0,420,422,7,2,0,0,421,420,1,0,0,0,422,423,1,
		0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,427,5,39,0,0,
		426,400,1,0,0,0,426,407,1,0,0,0,427,90,1,0,0,0,428,430,7,3,0,0,429,428,
		1,0,0,0,429,430,1,0,0,0,430,432,1,0,0,0,431,433,7,2,0,0,432,431,1,0,0,
		0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,92,1,0,0,0,436,438,
		7,3,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,442,1,0,0,0,439,441,7,2,0,
		0,440,439,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,
		445,1,0,0,0,444,442,1,0,0,0,445,447,5,46,0,0,446,448,7,2,0,0,447,446,1,
		0,0,0,448,449,1,0,0,0,449,447,1,0,0,0,449,450,1,0,0,0,450,460,1,0,0,0,
		451,453,7,4,0,0,452,454,7,3,0,0,453,452,1,0,0,0,453,454,1,0,0,0,454,456,
		1,0,0,0,455,457,7,2,0,0,456,455,1,0,0,0,457,458,1,0,0,0,458,456,1,0,0,
		0,458,459,1,0,0,0,459,461,1,0,0,0,460,451,1,0,0,0,460,461,1,0,0,0,461,
		94,1,0,0,0,462,465,3,63,31,0,463,465,3,65,32,0,464,462,1,0,0,0,464,463,
		1,0,0,0,465,96,1,0,0,0,466,467,3,67,33,0,467,98,1,0,0,0,468,472,7,5,0,
		0,469,471,7,6,0,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,
		473,1,0,0,0,473,100,1,0,0,0,474,472,1,0,0,0,475,477,7,7,0,0,476,475,1,
		0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,
		480,481,6,50,0,0,481,102,1,0,0,0,44,0,109,137,143,151,161,167,183,191,
		205,213,223,243,251,259,267,275,287,299,307,321,333,343,355,365,371,393,
		395,404,411,417,423,426,429,434,437,442,449,453,458,460,464,472,478,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
