//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Query.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="QueryParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IQueryListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>ExpressionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionQuery([NotNull] QueryParser.ExpressionQueryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ExpressionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionQuery([NotNull] QueryParser.ExpressionQueryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionQuery([NotNull] QueryParser.FunctionQueryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionQuery</c>
	/// labeled alternative in <see cref="QueryParser.query"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionQuery([NotNull] QueryParser.FunctionQueryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNotNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNotNullCondition([NotNull] QueryParser.IsNotNullConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNotNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNotNullCondition([NotNull] QueryParser.IsNotNullConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpression([NotNull] QueryParser.LiteralExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LiteralExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpression([NotNull] QueryParser.LiteralExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNullCondition([NotNull] QueryParser.IsNullConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNullCondition([NotNull] QueryParser.IsNullConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] QueryParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NotExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] QueryParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LikeCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLikeCondition([NotNull] QueryParser.LikeConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LikeCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLikeCondition([NotNull] QueryParser.LikeConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticExpression([NotNull] QueryParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticExpression([NotNull] QueryParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalExpression([NotNull] QueryParser.LogicalExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalExpression([NotNull] QueryParser.LogicalExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParentChildExpr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParentChildExpr([NotNull] QueryParser.ParentChildExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParentChildExpr</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParentChildExpr([NotNull] QueryParser.ParentChildExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionExpression([NotNull] QueryParser.FunctionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FunctionExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionExpression([NotNull] QueryParser.FunctionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BinaryCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinaryCondition([NotNull] QueryParser.BinaryConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BinaryCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinaryCondition([NotNull] QueryParser.BinaryConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ColumnExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnExpression([NotNull] QueryParser.ColumnExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ColumnExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnExpression([NotNull] QueryParser.ColumnExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInCondition([NotNull] QueryParser.InConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInCondition([NotNull] QueryParser.InConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpression([NotNull] QueryParser.ParenExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpression</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpression([NotNull] QueryParser.ParenExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BetweenCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBetweenCondition([NotNull] QueryParser.BetweenConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BetweenCondition</c>
	/// labeled alternative in <see cref="QueryParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBetweenCondition([NotNull] QueryParser.BetweenConditionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConvertFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConvertFunction([NotNull] QueryParser.ConvertFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConvertFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConvertFunction([NotNull] QueryParser.ConvertFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>LenFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLenFunction([NotNull] QueryParser.LenFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>LenFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLenFunction([NotNull] QueryParser.LenFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IsNullFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIsNullFunction([NotNull] QueryParser.IsNullFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IsNullFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIsNullFunction([NotNull] QueryParser.IsNullFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IifFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIifFunction([NotNull] QueryParser.IifFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IifFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIifFunction([NotNull] QueryParser.IifFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTrimFunction([NotNull] QueryParser.TrimFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>TrimFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTrimFunction([NotNull] QueryParser.TrimFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>SubstringFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSubstringFunction([NotNull] QueryParser.SubstringFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>SubstringFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSubstringFunction([NotNull] QueryParser.SubstringFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AggregateFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregateFunction([NotNull] QueryParser.AggregateFunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AggregateFunction</c>
	/// labeled alternative in <see cref="QueryParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregateFunction([NotNull] QueryParser.AggregateFunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] QueryParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] QueryParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.aggregate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAggregate([NotNull] QueryParser.AggregateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.aggregate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAggregate([NotNull] QueryParser.AggregateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.parentChildExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParentChildExpression([NotNull] QueryParser.ParentChildExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.parentChildExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParentChildExpression([NotNull] QueryParser.ParentChildExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.relationColumn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationColumn([NotNull] QueryParser.RelationColumnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.relationColumn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationColumn([NotNull] QueryParser.RelationColumnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.literalList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralList([NotNull] QueryParser.LiteralListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.literalList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralList([NotNull] QueryParser.LiteralListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] QueryParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] QueryParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="QueryParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnName([NotNull] QueryParser.ColumnNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="QueryParser.columnName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnName([NotNull] QueryParser.ColumnNameContext context);
}
