//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ModelExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ModelExpressionParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IModelExpressionVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] ModelExpressionParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpression([NotNull] ModelExpressionParser.OrExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpression([NotNull] ModelExpressionParser.AndExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.notExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] ModelExpressionParser.NotExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitComparisonExpression([NotNull] ModelExpressionParser.ComparisonExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>InList</c>
	/// labeled alternative in <see cref="ModelExpressionParser.inExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInList([NotNull] ModelExpressionParser.InListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpression([NotNull] ModelExpressionParser.AdditiveExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpression([NotNull] ModelExpressionParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryExpression([NotNull] ModelExpressionParser.UnaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExpression([NotNull] ModelExpressionParser.PrimaryExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] ModelExpressionParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionName([NotNull] ModelExpressionParser.FunctionNameContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] ModelExpressionParser.ArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.columnReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitColumnReference([NotNull] ModelExpressionParser.ColumnReferenceContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ModelExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] ModelExpressionParser.LiteralContext context);
}
