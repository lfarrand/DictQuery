//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ModelExpression.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ModelExpressionParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface IModelExpressionListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] ModelExpressionParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] ModelExpressionParser.ExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] ModelExpressionParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] ModelExpressionParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] ModelExpressionParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] ModelExpressionParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.notExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] ModelExpressionParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.notExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] ModelExpressionParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] ModelExpressionParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] ModelExpressionParser.ComparisonExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>InList</c>
	/// labeled alternative in <see cref="ModelExpressionParser.inExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInList([NotNull] ModelExpressionParser.InListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>InList</c>
	/// labeled alternative in <see cref="ModelExpressionParser.inExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInList([NotNull] ModelExpressionParser.InListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpression([NotNull] ModelExpressionParser.AdditiveExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.additiveExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpression([NotNull] ModelExpressionParser.AdditiveExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpression([NotNull] ModelExpressionParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.multiplicativeExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpression([NotNull] ModelExpressionParser.MultiplicativeExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpression([NotNull] ModelExpressionParser.UnaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.unaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpression([NotNull] ModelExpressionParser.UnaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimaryExpression([NotNull] ModelExpressionParser.PrimaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.primaryExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimaryExpression([NotNull] ModelExpressionParser.PrimaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] ModelExpressionParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] ModelExpressionParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionName([NotNull] ModelExpressionParser.FunctionNameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.functionName"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionName([NotNull] ModelExpressionParser.FunctionNameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ModelExpressionParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ModelExpressionParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.columnReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterColumnReference([NotNull] ModelExpressionParser.ColumnReferenceContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.columnReference"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitColumnReference([NotNull] ModelExpressionParser.ColumnReferenceContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ModelExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] ModelExpressionParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ModelExpressionParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] ModelExpressionParser.LiteralContext context);
}
